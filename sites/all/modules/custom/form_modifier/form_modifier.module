<?php
/**
 * @file: Functionality of the module.
 */

/**
 * Implements hook_form_alter.
 */
function form_modifier_form_alter(&$form, &$form_state, $form_id) {
  
  drupal_add_js(drupal_get_path('module', 'form_modifier') . '/js/form_modifier.js');
  
  if ($form['#id'] == 'comment-form') {
    if (isset($form['field_file_upload'][LANGUAGE_NONE]['#file_upload_description'])) {
      $form['field_file_upload'][LANGUAGE_NONE]['#file_upload_description'] = '';
    }
  }
  switch ($form_id) {
    case 'menu_edit_menu':
      
      if ($form['menu_name']['#default_value'] == 'og-menu-single') {
        
        drupal_add_js(drupal_get_path('module', 'form_modifier') . '/js/form_modifier.menuedit.js');
        
        $options = array();
        $space_query = new EntityFieldQuery();
        $space_result = $space_query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'oa_space')
          ->propertyCondition('status', 1)
          ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT')
          ->execute();
        
        if (!empty($space_result)) {
          $space_nodes = node_load_multiple(array_keys($space_result['node']));
          foreach ($space_nodes as $space_node) {
            $options[$space_node->title] = $space_node->title;
          }
        }
        
        $form['drill_down_parents'] = array(
          '#type' => 'select',
          '#title' => t('Search Menu Item'),
          '#multiple' => FALSE,
          '#options' => $options,
          '#empty_option' => ' - ' . t('Select a Parent Menu Item') . ' - ',
          '#weight' => -50,
        );

        foreach ($form as $key => $form_item) {
          if (strpos($key, 'mlid') !== FALSE) {
            $form[$key]['#attributes']['title'] = $form[$key]['#item']['title'];
          }
        }
        
        // Changing listing of menu items.
        $group_query = new EntityFieldQuery();
        $group_result = $group_query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'oa_group')
          ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT')
          ->execute();
        
        if (!empty($group_result)) {
          $group_paths = array_keys($group_result['node']);

          for ($i = 0; $i < count($group_paths); $i++) {
            $group_paths[$i] = 'node/' . $group_paths[$i];
          }

          foreach ($form as $key => $form_item) {
            if (
              strpos($key, 'mlid:') !== FALSE && 
              isset($form_item['#item']) && 
              in_array($form_item['#item']['link_path'], $group_paths)
            ) {
              unset($form[$key]);
            }
          }
        }
      }
    break;
    case 'views_exposed_form':
      
      if (strpos($form['#id'], 'views-exposed-form-admin-views-user-system') !== FALSE && 
          isset($form['og_user_node_target_id'])
      ) {
        
        $query = new EntityFieldQuery();
        $result = $query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'oa_group')
          ->propertyCondition('status', 1)
          ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT')
          ->propertyOrderBy('title', 'ASC')
          ->execute();
        
        $options = array();
        
        if (!empty($result)) {
          $group_nodes = node_load_multiple(array_keys($result['node']));
          
          foreach ($group_nodes as $group_node) {
            $options[$group_node->nid] = $group_node->title;
          }
        }
        
        $form['og_user_node_target_id'] = array(
          '#type' => 'select',
          '#multiple' => FALSE,
          '#options' => $options,
          '#validated' => TRUE,
          '#empty_option' => ' - ' . t('Please select a group') . ' - ',
        );
      }
    break;
    case 'panopoly_page_node_form':
      form_modifier_fix_group_ref_verbiage($form);
    break;
    case 'webform_node_form':
      form_modifier_fix_group_ref_verbiage($form);
    break;
    case 'devel_switch_user_form':
      $form['username']['#description'] = t("Please enter the user's first name or last name");
    break;
    case 'oa_space_node_form':
      if (isset($form['oa_parent_space'])) {
        $form['oa_parent_space']['und']['#description'] = '';
      }
    break;
    case 'oa_section_node_form':
      form_modifier_fix_group_ref_verbiage($form);
    break;
    case 'privatemsg_new':

      drupal_add_js(drupal_get_path('module', 'form_modifier') . '/js/form_modifier.privatemsg.js');
      
      if (isset($_GET['preset-message-uid'])) {
        
        $preset_user = user_load($_GET['preset-message-uid']);
        
        if ($preset_user !== FALSE) {
          $form['recipient']['#default_value'] = $preset_user->realname;
        }
      }
      
      $form['recipient']['#description'] = t('Enter the recipient, separate recipients with commas.');
      $form['subject']['#required'] = TRUE;
      $form['subject']['#maxlength'] = 256;
      $form['subject']['#size'] = 128;
      $form['body']['#required'] = TRUE;
      $form['body']['#format'] = 'plain_text';
      $form['body']['#resizable'] = FALSE;
      unset($form['recipient']['#autocomplete_path']);
      unset($form['actions']['cancel']);
      
      $form['redirection'] = array(
        '#type' => 'hidden',
        '#value' => (isset($_GET['form-mod-redirection'])) ? $_GET['form-mod-redirection'] : '',
      );
      
      $form['#submit'][] = 'form_modifier_privatemsg_new_submit';
    break;
    case 'block_admin_configure':
      if ($form['delta']['#value'] == '1') {
        drupal_add_css(drupal_get_path('module', 'form_modifier') . '/css/form_modifier.block.css');
      }
    break;
  }
}

/**
 * Helper Function.
 * Small helper function that changes the labeling of the og_group_ref field.
 * @param form: A form array.
 */
function form_modifier_fix_group_ref_verbiage(&$form) {
  
  if (isset($form['og_group_ref'])) {
    $form['og_group_ref']['und'][0]['default']['#title'] = t('Your Spaces');
    $form['og_group_ref']['und'][0]['default']['#description'] = t('Associate this content with spaces you belong to.');
    $form['og_group_ref']['und'][0]['admin'][0]['target_id']['#title'] = t('Other Spaces');
    $form['og_group_ref']['und'][0]['admin'][0]['target_id']['#description'] = t('Associate this content with spaces you do not belong to.');
  } 
}

/**
 * Form submit function.
 * Performs an appropriate page redirect after the private message creation for is filled out.
 */
function form_modifier_privatemsg_new_submit($form, &$form_state) {
  if ($form_state['values']['redirection'] != '') {
    $form_state['redirect'] = $form_state['values']['redirection'];
  }
}