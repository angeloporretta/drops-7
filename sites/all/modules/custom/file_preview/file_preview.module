<?php
/**
 * @file: Main functionality of the module.
 */

/**
 * Implements hook_permission.
 */
function file_preview_permission() {
  return array(
    'file preview settings' => array(
      'title' => t('Access file preview settings'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu.
 */
function file_preview_menu() {
  return array(
    'admin/config/file-preview' => array(
      'title' => t('File Preview Settings'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('file_preview_get_settings_form'),
      'access arguments' => array('file preview settings'),
      'file' => 'file_preview.admin.inc',
      'type' => MENU_NORMAL_ITEM,
    )
  );
}

/**
 * Implements hook_node_insert.
 */
function file_preview_node_insert($node) {
  $fields = field_info_instances('node' , 'file');
  if ($node->type == 'file') {
    foreach ($fields as $field) {
      if (isset($field['field_name'])) {
        $field_name = $field['field_name'];
        if (isset($node->$field_name)) {
          $node_field = $node->$field_name;
        }
      }
      if (isset($node_field) && isset($node_field[LANGUAGE_NONE][0]) && isset($field['settings']['file_extensions'])) {
        $files = field_get_items('node', $node, $field['field_name']);
        $saved_file = NULL;
        if ($files == FALSE) {
          drupal_set_message(t('A file preview could not be created for @file_title because no file was found', array('@file_title' => $node->title)), 'error');
        }
        else {
          file_preview_send_file_to_groupdocs($files);
        }
      }
    }
  }
}

/**
 * Implements hook_node_update.
 */
function file_preview_node_update($node) {

  if ($node->type == 'file') {
    $fields = field_info_instances('node' , 'file');
    foreach ($fields as $field) {
      if (isset($field['field_name'])) {
        $field_name = $field['field_name'];
        if (isset($node->$field_name)) {
          $node_field = $node->$field_name;
        }
      }

    if (isset($node_field) && isset($node_field[LANGUAGE_NONE][0]) && isset($field['settings']['file_extensions'])) {
      $k = 0;
      $old_files = field_get_items('node', $node->original, $field['field_name']);
      $new_files = field_get_items('node', $node, $field['field_name']);

      foreach ($old_files as $id => $file) {
        if ($file['fid'] != $new_files[$id]['fid']) {
          $k = 1;
        }
      }
      if ($old_files != FALSE && $new_files != FALSE && $k == 1) {
        file_preview_send_file_to_groupdocs($new_files);
      }
    }
  }
  }
}

/**
 * Implements hook_node_delete.
 */
function file_preview_node_delete($node) {

  if ($node->type == 'file') {

    // Include required libraries.
    $groupdocsphp_path = libraries_get_path('groupdocs-php');
    require_once $groupdocsphp_path . '/APIClient.php';
    require_once $groupdocsphp_path . '/StorageApi.php';
    require_once $groupdocsphp_path . '/GroupDocsRequestSigner.php';
    require_once $groupdocsphp_path . '/FileStream.php';

    $base_path = 'https://api.groupdocs.com/v2.0';
    $signer = new GroupDocsRequestSigner(variable_get('file_preview_groupdocs_private_key', '2547'));
    @$api_client = new APIClient($signer);
    $shared = new SharedApi($api_client);
    $shared->setBasePath($base_path);
    $result = "";
    $user_data = $shared->LoginUser(
      variable_get('file_preview_groupdocs_username', 'aporretta@impetushealthcare.com'), 
      variable_get('file_preview_groupdocs_password', 'JSsK8s2Ks00J7')
    );

    if ($user_data->status == 'Ok') {
      $result = $user_data->result->user;
      $user_id = $result->guid;
      $api_storage = new StorageApi($api_client);
      $node_revision_ids = array_keys(node_revision_list($node));

      $fields = field_info_instances('node' , 'file');
      foreach ($node_revision_ids as $node_revision_id) {
        foreach ($fields as $field) {
          if (isset($field['field_name'])) {
            $field_name = $field['field_name'];
            if (isset($node->$field_name)) {
              $node_field = $node->$field_name;
            }
          }
        $file_node = node_load($node->nid, $node_revision_id);
        if (isset($node_field[LANGUAGE_NONE][0]['filename'])){
        $file_field = field_get_items('node', $file_node, $field['field_name']);
        foreach ($file_field as $field) {
        $guid_result = db_select('file_preview_preview_guids', 'g')
          ->fields('g', array('groupdocs_guid'))
          ->condition('fid', $field['fid'], '=')
          ->execute()
          ->fetchAll();
        
        if (!empty($guid_result)) {
          $result = $api_storage->Delete($user_id, $guid_result[0]->groupdocs_guid);
        }
        else {
          drupal_set_message(
            t('We could not find the preview GUID for the file @node_title with the version id @vid', array('@node_title' => $file_node->title, '@vid' => $file_node->vid)), 
            'error'
          );
        }
        }
      }
      }
    }
    } 
    else {
      drupal_set_message(t('A file preview could not be created for @file_title.' . $user_data->error_message, array('@file_title' => $node->title)), 'error');
    }
  }
}

/**
 * Implements hook_file_delete.
 */
function file_preview_file_delete($file) {
  db_delete('file_preview_preview_guids')
    ->condition('fid', $file->fid)
    ->execute();
}

/**
 * Helper function.
 * Sends a file to be stored in groupdocs.
 * @param array $file_field:  A file field array. This should be the result of field_get_items. 
 *                            This assumes that there is only ONE file attached in this field per node.
 */
function file_preview_send_file_to_groupdocs($file_field) {

  // Include required libraries.
  $groupdocsphp_path = libraries_get_path('groupdocs-php');
  require_once $groupdocsphp_path . '/APIClient.php';
  require_once $groupdocsphp_path . '/StorageApi.php';
  require_once $groupdocsphp_path . '/GroupDocsRequestSigner.php';
  require_once $groupdocsphp_path . '/FileStream.php';

  $base_path = 'https://api.groupdocs.com/v2.0';
  $signer = new GroupDocsRequestSigner(variable_get('file_preview_groupdocs_private_key', '2547'));
  @$api_client = new APIClient($signer);
  $shared = new SharedApi($api_client);
  $shared->setBasePath($base_path);
  $result = "";
  $user_data = $shared->LoginUser(
    variable_get('file_preview_groupdocs_username', 'aporretta@impetushealthcare.com'), 
    variable_get('file_preview_groupdocs_password', 'JSsK8s2Ks00J7')
  );

  if ($user_data->status == 'Ok') {
    $result = $user_data->result->user;
    $user_id = $result->guid;
    foreach($file_field as $field) {
      $saved_file = file_load($field['fid']);
      $file_path = drupal_realpath($saved_file->uri);
      $name = $_SERVER['HTTP_HOST'] . '/' . substr($saved_file->uri, strrpos($saved_file->uri, '/') + 1);

      $file_stream = FileStream::fromFile($file_path);
      $api_storage = new StorageApi($api_client);
      $result = $api_storage->Upload(
        variable_get('file_preview_groupdocs_client_id', NULL), 
        $name, 
        'uploaded', 
        NULL, 
        $file_stream
      );

      if ($result->status != 'Ok') {
        drupal_set_message(t('A file preview could not be created for @file_title.' . $result->error_message, array('@file_title' => $node->title)), 'error');
      }
      else {
        $guid_result = db_select('file_preview_preview_guids', 'g')
          ->fields('g', array('groupdocs_guid'))
          ->condition('groupdocs_guid', $result->result->guid, '=')
          ->execute()
          ->fetchAll();
        
        if (empty($guid_result)) {
          $guid = db_insert('file_preview_preview_guids')
          ->fields(
            array(
              'groupdocs_guid' => $result->result->guid,
              'fid' => $field['fid'],
            )
          )
          ->execute();
          if ($guid === NULL) {
            drupal_set_message(t('A file preview could not be created for @file_title. The GUID could not be saved in our database.'), 'error');
          }
        }
      }
    }
  } 
  else {
    drupal_set_message(t('A file preview could not be created for @file_title.' . $user_data->error_message, array('@file_title' => $node->title)), 'error');
  }
}

/**
 * Implements hook_preprocess_field.
 */
function file_preview_preprocess_field(&$variables) {

  if ($variables['element']['#field_type'] == 'file') {
    if (isset($variables['element']['#items'])) {
      foreach ($variables['element']['#items'] as $id => $item) {
        $guid_result = db_select('file_preview_preview_guids', 'g')
          ->fields('g', array('groupdocs_guid'))
          ->condition('fid', $item['fid'], '=')
          ->execute()
          ->fetchAll();
        if (!empty($guid_result)) {
          $groupdocsphp_path = libraries_get_path('groupdocs-php');
          require_once $groupdocsphp_path . '/APIClient.php';
          require_once $groupdocsphp_path . '/StorageApi.php';
          require_once $groupdocsphp_path . '/GroupDocsRequestSigner.php';
          require_once $groupdocsphp_path . '/DocApi.php';

          $base_path = 'https://api.groupdocs.com/v2.0';
          $signer = new GroupDocsRequestSigner(variable_get('file_preview_groupdocs_private_key', '2547'));
          @$api_client = new APIClient($signer);
          //$docsClient = new DocApi($api_client);
          $shared = new SharedApi($api_client);
          $shared->setBasePath($base_path);
          $username = variable_get('file_preview_groupdocs_username', 'aporretta@impetushealthcare.com');
          $password = variable_get('file_preview_groupdocs_password', 'JSsK8s2Ks00J7');
          $user_data = $shared->LoginUser($username, $password);
          $url = 'https://apps.groupdocs.com/document-viewer/embed/' . $guid_result[0]->groupdocs_guid . '?referer=impetus-healthcare';
          $url = $signer->signUrl($url);

          $variables['items'][]['preview'] = array(
            '#type' => 'markup',
            '#prefix' => '<div id="document-preview">',
            '#suffix' => '</div>',
            '#markup' => '<iframe src="' . $url . '" frameborder="0" width="800" height="650"></iframe>',
          );
        }
      }
    }
  }
}

/**
 * Implements hook_cron.
 */
function file_preview_cron() {
  
  $groupdocsphp_path = libraries_get_path('groupdocs-php');
  include_once $groupdocsphp_path . '/APIClient.php';
  include_once $groupdocsphp_path . '/SystemApi.php';
  
  
  $signer = new GroupDocsRequestSigner(variable_get('file_preview_groupdocs_private_key', '2547'));
  @$api_client = new APIClient($signer);
  $system_api = new SystemApi($api_client);
  $plan_usage_response = $system_api->GetSubscriptionPlanUsage(variable_get('file_preview_groupdocs_client_id', NULL));

  // Sending token limit emails.
  $monthly_token_limit = $plan_usage_response->result->subscription_plan->document_tokens;
  $monthly_token_usage = $plan_usage_response->result->usage->document_tokens;
  $token_notification_email_key = 'file_preview_token_limit_notification';
  $token_overage_email_key = 'file_preview_token_limit_overage';
  $token_notification_result = db_select('file_preview_cron_email_notifications', 'c')
    ->fields('c', array('email_key'))
    ->condition('email_key', $token_notification_email_key, '=')
    ->condition('timestamp', strtotime('first day of this month'), '>')
    ->condition('timestamp', strtotime('last day of this month'), '<')
    ->execute()
    ->fetchAll();
  $token_overage_result = db_select('file_preview_cron_email_notifications', 'c')
    ->fields('c', array('email_key'))
    ->condition('email_key', $token_overage_email_key, '=')
    ->condition('timestamp', strtotime('first day of this month'), '>')
    ->condition('timestamp', strtotime('last day of this month'), '<')
    ->execute()
    ->fetchAll(); 
  
  if ($monthly_token_usage > $monthly_token_limit - 50 && $monthly_token_usage <= $monthly_token_limit && empty($token_notification_result)) {
    
    file_preview_insert_cron_notification_record($token_notification_email_key);
    
    drupal_mail(
      'file_preview', 
      $token_notification_email_key, 
      'support@impetushealthcare.com', 
      user_preferred_language(user_load(1)), 
      array(
        'limit' => $monthly_token_limit,
        'usage' => $monthly_token_usage,
      ), 
      variable_get('site_mail', 'portal@impetushealthcare.com'), 
      TRUE
    );
  }
  else if ($monthly_token_usage > $monthly_token_limit && empty($token_overage_result)) {
    
    file_preview_insert_cron_notification_record($token_overage_email_key);
    
    drupal_mail(
      'file_preview', 
      $token_overage_email_key, 
      'support@impetushealthcare.com', 
      user_preferred_language(user_load(1)), 
      array(
        'limit' => $monthly_token_limit,
        'usage' => $monthly_token_usage,
      ), 
      variable_get('site_mail', 'portal@impetushealthcare.com'), 
      TRUE
    );
  }
  
  // Sending views limit emails.
  $monthly_view_limit = $plan_usage_response->result->subscription_plan->viewer;
  $monthly_view_usage = $plan_usage_response->result->usage->viewer;
  $views_notification_email_key = 'file_preview_view_limit_notification';
  $views_overage_email_key = 'file_preview_view_limit_overage';
  $views_notification_result = db_select('file_preview_cron_email_notifications', 'c')
    ->fields('c', array('email_key'))
    ->condition('email_key', $views_notification_email_key, '=')
    ->condition('timestamp', strtotime('first day of this month'), '>')
    ->condition('timestamp', strtotime('last day of this month'), '<')
    ->execute()
    ->fetchAll();
  $views_overage_result = db_select('file_preview_cron_email_notifications', 'c')
    ->fields('c', array('email_key'))
    ->condition('email_key', $views_overage_email_key, '=')
    ->condition('timestamp', strtotime('first day of this month'), '>')
    ->condition('timestamp', strtotime('last day of this month'), '<')
    ->execute()
    ->fetchAll(); 
  
  if ($monthly_view_limit != 0 && $monthly_view_usage > $monthly_view_limit - 75 && $monthly_view_usage <= $monthly_view_limit && empty($views_notification_result)) {
    
    file_preview_insert_cron_notification_record($views_notification_email_key);
    
    drupal_mail(
      'file_preview', 
      $views_notification_email_key, 
      'support@impetushealthcare.com', 
      user_preferred_language(user_load(1)), 
      array(
        'limit' => $monthly_view_limit,
        'usage' => $monthly_view_usage,
      ), 
      variable_get('site_mail', 'portal@impetushealthcare.com'), 
      TRUE
    );
  }
  else if ($monthly_view_limit != 0 && $monthly_view_usage > $monthly_view_limit && empty($views_overage_result)) {
    
    file_preview_insert_cron_notification_record($views_overage_email_key);
    
    drupal_mail(
      'file_preview', 
      $views_overage_email_key, 
      'support@impetushealthcare.com', 
      user_preferred_language(user_load(1)), 
      array(
        'limit' => $monthly_view_limit,
        'usage' => $monthly_view_usage,
      ), 
      variable_get('site_mail', 'portal@impetushealthcare.com'), 
      TRUE
    );
  }
}

/**
 * Implements hook_mail.
 */
function file_preview_mail($key, &$message, $params) {
  
  switch ($key) {
    case 'file_preview_token_limit_notification':
      $message = array(
        'to' => 'support@impetushealthcare.com',
        'subject' => t('Reaching limit of available GroupDocs document tokens.'),
        'body' => t(
          'The document tokens for this month (@date) are reaching its limit. We are allowed @limit and we are currently using @usage document tokens.',
          array('@limit' => $params['limit'], '@usage' => $params['usage'], '@date' => date('F Y'))
        ),
      );
    break;
    case 'file_preview_token_limit_overage':
      $message = array(
        'to' => 'support@impetushealthcare.com',
        'subject' => t('Reached limit of available GroupDocs document tokens!'),
        'body' => t(
          'The document tokens for this month (@date) have reached its limit. We are allowed @limit and we are currently using @usage document tokens.',
          array('@limit' => $params['limit'], '@usage' => $params['usage'], '@date' => date('F Y'))
        ),
      );
    break;
    case 'file_preview_view_limit_notification':
      $message = array(
        'to' => 'support@impetushealthcare.com',
        'subject' => t('Reaching limit of available GroupDocs views.'),
        'body' => t(
          'The groupdocs views for this month (@date) is reaching its limit. We are allowed @limit and we are currently using @usage document views.',
          array('@limit' => $params['limit'], '@usage' => $params['usage'], '@date' => date('F Y'))
        ),
      );
    break;
    case 'file_preview_view_limit_overage':
      $message = array(
        'to' => 'support@impetushealthcare.com',
        'subject' => t('Reached limit of available GroupDocs document tokens!'),
        'body' => t(
          'The groupdocs views for this month (@date) have reached its limit. We are allowed @limit and we are currently using @usage document views.',
          array('@limit' => $params['limit'], '@usage' => $params['usage'], '@date' => date('F Y'))
        ),
      );
    break;
  }
  
}

/**
 * Helper Function.
 * Creates a record in the file_preview_cron_email_notifications table.
 * @param string $email_key: An email key used to send off a notification email.
 */
function file_preview_insert_cron_notification_record($email_key) {
  db_insert('file_preview_cron_email_notifications')
  ->fields(array(
    'email_key' => $email_key,
    'timestamp' => REQUEST_TIME,
  ))
  ->execute();
}