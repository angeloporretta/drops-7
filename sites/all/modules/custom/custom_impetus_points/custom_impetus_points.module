<?php

/**
 * Implements hook_form_alter.
 */
function custom_impetus_points_form_alter(&$form, &$form_state, $form_id) {
  global $base_url;
  if (isset($form['#node_edit_form']) && $form['#node_edit_form']) {
    if (isset($form['field_add_points'])) {
      $field = $form['field_add_points'];
      unset($form['field_add_points']);
      $form['comment_settings']['field_add_points'] = $field;
      $form['comment_settings']['field_add_points'][LANGUAGE_NONE][0]['#prefix'] = "<strong>Points for comment submission:</strong>";
    }
    if (isset($form['field_points_category'])) {
      $term = $form['field_points_category'];
      unset($form['field_points_category']);
      $form['comment_settings']['field_points_category'] = $term;
    }
  }

  if ($form_id == 'webform_configure_form') {
    $settings = _get_webform_setting($form['nid']['#value']);
    $category_string = '';
    $categories = unserialize($settings['categories']);
    foreach($categories as $category) {
      $category_string .= $category . ",";
    }
    rtrim($category_string, ",");

    $form['points-fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('Award points for submission'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => -10,
    );

    $form['points-fieldset']['points'] = array(
      '#type' => 'textfield',
      '#title' => t('Points earned on form submit'),
      '#required' => FALSE,
      '#weight' => -10,
    );
    $form['points-fieldset']['categories'] = array(
      '#type' => 'autocomplete_deluxe',
      '#autocomplete_deluxe_path' => $base_url . '/autocomplete_deluxe/taxonomy/field_points_category',
      '#not_found_message' => t("The term '@term' will be added."),
      '#title' => t('Points Category'),
      '#default_value' => $category_string,
      '#multiple' => TRUE,
      '#weight' => -10,
    );

    if ($settings) {
      $form['points-fieldset']['points']['#default_value'] = $settings['points'];
    }
    $form['#submit'][] = 'save_points_settings';
  }

  if (strpos($form_id, "webform_client_form_") !== FALSE) {
    $form['#submit'][] = "add_webform_points";
  }
}

function add_webform_points($form, $form_state) {
  global $user;
  $nid = $form_state['values']['details']['nid'];
  $webform_node = node_load($nid);
  $settings = _get_webform_setting($nid);
  $points = $settings['points'];
  $categories = unserialize($settings['categories']);
  $params = array(
    'uid' => $user->uid,
    'points' => $points,
  );
  foreach($categories as $tid => $category) {
    $params['tid'] = $tid;
    userpoints_userpointsapi($params);
  }
}

function save_points_settings($form, $form_state) {
  $tids = array();
  if (empty($form_state['input']['points'])) {
    $points = 0;
  } else {
    $points = $form_state['input']['points'];
  }
  if (isset($form_state['input']['categories']['value_field']) && !empty($form_state['input']['categories']['value_field'])) {
    $terms = explode('""', $form_state['input']['categories']['value_field']);
    foreach($terms as $term) {
      if (!empty($term) && $term != ' ') {
        // $term = str_replace('""', "", $term);
        if (!empty($term)) {
          $term_object = taxonomy_get_term_by_name($term, "userpoints");
          if (!empty($term_object)) {
            $term_object_name = reset($term_object);
            $tids[$term_object_name->tid] = $term_object_name->name;
          } else {
            $save_term = new stdClass();
            $vocab = taxonomy_vocabulary_machine_name_load("userpoints");
            $save_term->name = $term;
            $save_term->vid = $vocab->vid;
            taxonomy_term_save($save_term);
            $tids[$save_term->tid] = $save_term->name;
          }
        }
      }
    }
  }
  $tids_ser = serialize($tids);
  $overwrite = _setting_saved($form_state['values']['nid']);
  if($overwrite) {
    db_update("impetus_webform_points")
      ->fields(array(
        'points' => $points,
        'categories' => $tids_ser,
      ))
      ->condition('nid', $form_state['values']['nid'], '=')
      ->execute();
  } else {
    db_insert("impetus_webform_points")
      ->fields(array(
        'nid' => $form_state['values']['nid'],
        'points' => $points,
        'categories' => $tids_ser,
      ))
      ->execute();
  }
}

function _setting_saved($nid) {
  $settings = db_select("impetus_webform_points", "i")
    ->fields('i')
    ->condition('nid', $nid, '=')
    ->execute()
    ->fetchAssoc();
  if (empty($settings)) {
    return FALSE;
  } else {
    return TRUE;
  }
}

function _get_webform_setting($nid) {
  $settings = db_select("impetus_webform_points", "i")
    ->fields('i')
    ->condition('nid', $nid, '=')
    ->execute()
    ->fetchAssoc();

  if (isset($settings['points'])) {
    return $settings;
  }

  return FALSE;
}

function custom_impetus_points_comment_insert($comment) {
  $node = node_load($comment->nid);
  if (isset($comment->ziggeo_comment) && $comment->ziggeo_comment) {
    if ($node->nid == 1052) {
      $points = 10;
      $params = array(
        'uid' => $comment->uid,
        'points' => $points,
      );
    }
  } else if (isset($node->field_add_points[LANGUAGE_NONE][0]['value']) && !empty($node->field_add_points[LANGUAGE_NONE][0]['value'])) {
    $points = $node->field_add_points[LANGUAGE_NONE][0]['value'];
    if (isset($node->field_points_category[LANGUAGE_NONE][0]['tid']) && !empty($node->field_points_category[LANGUAGE_NONE][0]['tid'])) {
      foreach($node->field_points_category[LANGUAGE_NONE] as $tid) {
        $category_id = $tid['tid'];
        $params = array(
          'uid' => $comment->uid,
          'points' => $points,
          'tid' => $category_id,
        );
        userpoints_userpointsapi($params); 
      }
    } else {
      $params = array(
        'uid' => $comment->uid,
        'points' => $points,
      );
      userpoints_userpointsapi($params); 
    }
  }
}

function custom_impetus_points_menu() {
  $items = array();

  $items['admin/add-points-retroactively'] = array(
    'title' => t('Add points retroactively'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('add_points_retroactively'),
    'access arguments' => array('add user to groups'),
  );

  return $items;
}

function add_points_retroactively($form, &$form_state) {

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  
  return $form;
}

function add_points_retroactively_submit($form, &$form_state) {
  $users = db_select("users", "u")
    ->fields("u")
    ->condition('uid', 0, '>')
    ->execute();

  while ($user = $users->fetchAssoc()) {
    $idea_points = _get_points_from_created_ideas($user['uid']);
    $params = array(
      'uid' => $user['uid'],
      'points' => $idea_points,
    );
      userpoints_userpointsapi($params); 
  }
}

function _get_points_from_created_ideas($uid) {
  $points = db_select('node', 'n')
    ->fields('n')
    ->condition('type', 'ideas', '=')
    ->condition('uid', $uid, '=')
    ->countQuery()
    ->execute()
    ->fetchField();

  return $points * 5;
}

?>