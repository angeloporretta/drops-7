<?php

module_load_include('inc', 'custom_webforms', '/components/webform-ranking');
module_load_include('inc', 'webform', '/includes/webform.components');


/**
 * Implements hook_ctools_plugin_directory.
 */
function custom_webforms_ctools_plugin_directory($owner, $plugin_type) {
  
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

function custom_webforms_menu() {
  $items = array();

  $items['force-download/%'] = array(
    'page callback' => 'force_download_of_file',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

function force_download_of_file($fid) {
  $file = file_load(arg(1));
  header("Content-Disposition: attachment;Filename=" . $file->filename);
  return $file;
}

/**
 * Implements _webform_theme_component().
 */
function custom_webforms_theme() {
  return
    array(
      'webform_ranking_table' => array(
        'render element' => 'element',
      ),
      'webform_template' => array(
        'path' => drupal_get_path('module', 'custom_webforms') . '/templates',
        'template' => 'webforms_template',
      ),
    );
}

/**
 * Implements hook_node_view().
 *
 */
function custom_webforms_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'webform') {
    if ($view_mode == 'full' || $view_mode == 'print') {
      module_load_include('inc', 'webform');
      module_load_include('inc', 'theme');
    }
  } 
}

/**
 * Define components to Webform.
 * @see webform.api.php
 * @see webform_components()
 */
function custom_webforms_webform_component_info() {
  $components = array();

  $components['ranking'] = array(
      'label' => t('Ranking Question'),
      'description' => t('Basic ranking question'),
      'features' => array(
          // This component supports defmatault values. Defaults to TRUE.
          'default_value' => FALSE,
          // This component supports a description field. Defaults to TRUE.
          'description' => TRUE,
          // This component supports a title attribute. Defaults to TRUE.
          'title' => TRUE,
          // This component has a title that can be toggled as displayed or not.
          'title_display' => TRUE,
          // This component has a title that can be displayed inline.
          'title_inline' => FALSE,
          // If this component can be used as a conditional SOURCE. All components
          // may always be displayed conditionally, regardless of this setting.
          // Defaults to TRUE.
          'conditional' => TRUE,
          // If this component allows other components to be grouped within it
          // (like a fieldset or tabs). Defaults to FALSE.
          'group' => FALSE,
          // Add content to CSV downloads. Defaults to TRUE.
          'csv' => TRUE,
      ),
      'file' => 'components/ranking.inc',
      'file path' => drupal_get_path('module', 'custom_webforms'),
  );
  return $components;
}

function custom_webforms_form_alter(&$form, &$form_state, $form_id) {
  
  if(strpos($form_id, 'webform_client_form_') === 0) {
    foreach($form['#node']->webform['components'] as $cid => $component) {
      if ($component['type'] == 'ranking' && $component['form_key']) {
          
          $form['#validate'][] = 'custom_webforms_form_validate';
          
        $nid = $component['nid'];
        $value = array();

        // Load this submission. This allows anonymous users to use auto-save.
        if (!empty($form_state['input']['details']['sid'])) {
          $submission = webform_get_submission($nid, $form_state['values']['details']['sid']);
          if (!empty($submission->data[$cid])) {
            $value = $submission->data[$cid];
          }
        }

        // Form state storage override any default submission information.
        if (isset($form_state['storage']['submitted'][$cid])) {
          $value = $form_state['storage']['submitted'][$cid];
        }

        // Form state values override any default submission information.
        if (isset($form_state['values']['submitted'][$cid])) {
          $value = $form_state['values']['submitted'][$cid];
        }

        // Convert the value structure to always be an array, matching
        // $submission->data.
        if (!is_array($value)) {
          $value = array($value);
        }

        $formkey = $component['form_key'];
        $pid = $component['pid'];
        $element = array();
        $element['#weight'] = $component['weight'];
        $element['#webform_component'] = $component;
        $columns = array();
        if ($component['extra']['ranking_col_type'] == 0) {
          $column_number = sizeof($component['extra']['ranking_fieldset']['num_labels']);
          foreach($component['extra']['ranking_fieldset']['num_labels'] as $labels) {
            $column[] = $labels;
          }
        } else {
          $column_number = $component['extra']['ranking_col'];
          for($i = 1; $i <= $column_number; $i++) {
            $column[] = $i;
          }
        }
        $row_number = sizeof($component['extra']['row_fieldset']['num_row_labels']);

        for($r_number = 1; $r_number <= $row_number; $r_number++) {
    
          $element[$r_number] = array(
            '#type' => 'radios',
            // '#title' => $column[$c_number--],
            '#required' => TRUE,
            '#options' => $column,
            // '#attributes' => array(
            //   'class' => array('')
            // ),
          );

          $parent_element = _webform_matrix_component_fieldset_parents($component['cid'], $form['submitted']);
          $parent_element[] = $formkey;
          drupal_array_set_nested_value($form['submitted'], $parent_element, $element);
          $parent_element[] = '#theme';
          drupal_array_set_nested_value($form['submitted'], $parent_element, array('webform_ranking_table'));
        }

      }
    }
  }
}


/**
 * Additional handler for validation.
 */
function custom_webforms_form_validate($form, &$form_state) {
  foreach($form['#node']->webform['components'] as $cid => $component) {
    $sum = 1;
    if ($component['type'] == 'ranking' && $component['form_key']) {
      $nid = $component['nid'];
      $value = array();
      //get ranking question rows
      $row_number = sizeof($component['extra']['row_fieldset']['num_row_labels']);
      // Load this submission. This allows anonymous users to use auto-save.
      if (!empty($form_state['input']['details']['sid'])) {
        $submission = webform_get_submission($nid, $form_state['values']['details']['sid']);
         if (!empty($submission->data[$cid])) {
          $serialized_object = $submission->data[$cid][0];
            $val = unserialize($serialized_object);
            
            $rows = count($val);

            foreach($val as $v) {
              if(!empty($v)) {
                $sum++;
              }
            }
        }
      }

      $empty = FALSE;

      if (isset($form_state['input']['submitted'][$component['form_key']])) {
        foreach($form_state['input']['submitted'][$component['form_key']] as $ranking_values) {
          if ($ranking_values == '') {
            $empty = TRUE;
          }
        }
      } else if ($component['required'] == 1) {
        $empty = TRUE;
      }

      if ($row_number > sizeof($form_state['input']['submitted'][$component['form_key']])) {
        $empty = TRUE;
      }
     
      if($component['required'] == 1 && $empty) {
        form_set_error($component['form_key'], t('The '.$component['name'].' field is required'));
      } 
    }
  }
}


/**
 * Implements hook_form_formid_alter().
 */
function custom_webforms_form_webform_component_edit_form_alter(&$form, &$form_state, $formid) {
  if ($form['type']['#value'] == 'ranking') {
    $component = $form_state['build_info']['args'][1];
    $ranking_form = _webform_ranking_component_get_form($form, $form_state, $component);
    $form = array_merge($form, $ranking_form);
  }
}

/**
 * Theme for webform matrix.
 */
function theme_webform_ranking_table($variables) {
  $columns = array();
  $output = '';
  drupal_add_js(drupal_get_path('module', 'custom_webforms') . '/js/ranking.js');
  if ($variables['element']['#webform_component']['extra']['ranking_col_type'] == 0) {
    $column_number = sizeof($variables['element']['#webform_component']['extra']['ranking_fieldset']['num_labels']);
    foreach($variables['element']['#webform_component']['extra']['ranking_fieldset']['num_labels'] as $labels) {
      $columns[] = $labels;
    }
  } else {
    $column_number = $variables['element']['#webform_component']['extra']['ranking_col'];
    for($i = 1; $i <= $column_number; $i++) {
      $columns[] = $i;
    }
  }
  
  if (isset($variables['element']['#webform_component']['name']) && !empty($variables['element']['#webform_component']['name'])) {
    $required = '';
    if($variables['element']['#webform_component']['required'] == 1) {
      $required = '<span class="form-required" title="This field is required.">*</span>';
    }
    $output .= '<label>' . $variables['element']['#webform_component']['name'] . $required . '</label>';
  }

  if (isset($variables['element']['#webform_component']['extra']['description']) && !empty($variables['element']['#webform_component']['extra']['description'])) {
    $output .= '<div class="description" style="font-size: 0.85em;">' . $variables['element']['#webform_component']['extra']['description'] . "</div>";
  }

  $output .= '<table class="ranking-table">';
  $output .= '<thead><th></th>';
  foreach($columns as $column) {
    $output .= '<th>' . $column . '</th>';
  }
  $output .= '</thead>';
  $output .= '<tbody>';
  $column = 1;
  $row = 0;
  if(arg(0) == 'printpdf') {
    $output .= '<tr></tr>';
  }
  foreach($variables['element']['#webform_component']['extra']['row_fieldset']['num_row_labels'] as $row_labels) {
    $column = 0;
    $row++;
    $output .= '<tr>';
    $output .= '<td>' . $row_labels . '</td>';
    
    foreach($columns as $col) {
      $variables['element'][$row][$column]['#attributes']['class'] = array('col-' . $column . ' row-' . $row);
      $variables['element'][$row][$column]['#title'] = '';
      // $output .= '<td>' . '<input type="radio" class="col-' . $column . " row-" . $row . '"></input>' . '</td>';
      $output .= '<td>' . drupal_render($variables['element'][$row][$column]) . '</td>';
      $column++;
    }
    $output .= '</tr>';
  }
  $output .= '</tbody>';
  $output .= "</table>";

  return $output;
}

function add_more_labels_validate($form , $form_state) {

}

function remove_label_validate($form , $form_state) {

}

/* COLUMN AJAX */

function add_more_labels_ajax($form, &$form_state) {
  if (!isset($form_state['num_labels'])) {
    if (isset($form_state['input']['extra']['ranking_fieldset']['num_labels'])) {
      $form_state['num_labels'] = sizeof($form_state['input']['extra']['ranking_fieldset']['num_labels']);
    } else {
      $form_state['num_labels'] = 0;
      $form_state['num_labels']++;
    }
  }
  $form_state['num_labels']++;
  $form_state['rebuild'] = TRUE;
}

function label_ajax_callback($form , $form_state) {
  return $form['extra']['ranking_fieldset'];
}

function add_more_labels_ajax_remove($form , &$form_state) {
  if (!isset($form_state['num_labels'])) {
    $form_state['num_labels'] = sizeof($form_state['input']['extra']['ranking_fieldset']['num_labels']);
  }
  $form_state['num_labels']--;
  $form_state['rebuild'] = TRUE;
}

function label_remove_ajax_callback($form , $form_state) {
  return $form['extra']['ranking_fieldset'];
}

/* ROW AJAX */

function add_more_row_labels_ajax($form, &$form_state) {
  if (!isset($form_state['num_row_labels'])) {
    if (isset($form_state['input']['extra']['row_fieldset']['num_row_labels'])) {
      $form_state['num_row_labels'] = sizeof($form_state['input']['extra']['row_fieldset']['num_row_labels']);
    } else {
      $form_state['num_row_labels'] = 0;
      $form_state['num_row_labels']++;
    }
  }
  $form_state['num_row_labels']++;
  $form_state['rebuild'] = TRUE;
}

function row_label_ajax_callback($form , $form_state) {
  return $form['extra']['row_fieldset'];
}

function add_more_row_labels_ajax_remove($form , &$form_state) {
  if (!isset($form_state['num_row_labels'])) {
    $form_state['num_row_labels'] = sizeof($form_state['input']['extra']['row_fieldset']['num_row_labels']);
  }
  $form_state['num_row_labels']--;
  $form_state['rebuild'] = TRUE;
}

function row_label_remove_ajax_callback($form , $form_state) {
  return $form['extra']['row_fieldset'];
}