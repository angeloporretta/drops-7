<?php
/**
 * @file: Functionality of the module.
 */

module_load_include('inc', 'bulk_file_upload', 'bulk_file_upload.forms');

/**
 * Implements hook_menu_alter.
 */
/*function bulk_file_upload_menu_alter(&$items) {
  
  if (isset($items['node/add/file'])) {
    $items['node/add/file']['access callback'] = 'bulk_file_upload_access_file_pages';
  }
  if (isset($items['node/%/edit'])) {
    kpr($items['node/%/edit']);
    var_dump($items['node/%/edit']);
    exit();
  }
}

function bulk_file_upload_access_file_pages() {
  
  global $user;
  $access = FALSE;
  
  if ($user->uid != 0) {
    $access = TRUE;
  }
  
  return $access;
}

//function bulk_file_upload_form_alter(&$form, &$form_state, $form_id) {
  
//  global $user;
  
//  if ($form_id == 'file_node_form' && $user->uid != 0) {
//    drupal_add_http_header('status', 404);
//    exit();
//  }
//}
 * 
 */

/**
 * Implements hook_ctools_plugin_directory.
 */
function bulk_file_upload_ctools_plugin_directory($owner, $plugin_type) {
  
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_menu.
 */
function bulk_file_upload_menu() {
  
  return array(
    'bulk-download-files' => array(
      'title' => t('Bulk Download Files'),
      'description' => t('Provides the ability to bulk download files as a zip.'),
      'page callback' => 'bulk_file_upload_render_download_page',
      'access callback' => 'user_access',
      'access arguments' => array('bulk download file archive'),
      'file' => 'bulk_file_upload.pages.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
  );
}

/**
 * Usort implementation.
 * Meant to the result of the taxonomy_get_children function.
 */
function bulk_file_upload_sort_child_folders($a, $b) {
  return strcmp($a->name, $b->name);
}

/**
 * Implements template_preprocess_taxonomy_term.
 */
function bulk_file_upload_preprocess_taxonomy_term(&$variables) {
  
  if ($variables['vocabulary_machine_name'] == 'file_categories') {
    $variables['content']['bulk_file_uploads'] = array(
      '#type' => 'markup',
      '#markup' => '',
    );
    
    $variables['content']['bulk_file_uploads']['#markup'] .= bulk_file_upload_render_child_folders($variables['term']->tid) .
      render(drupal_get_form('bulk_file_upload_add_taxonomy_term_form', $variables['term']->tid)) .
      bulk_file_upload_render_file_table($variables['term']->tid) .
      render(drupal_get_form('bulk_file_upload_add_files_form', $variables['term']->tid));
  }
}

/**
 * Implements hook_page_build.
 */
function bulk_file_upload_page_build(&$page) {
  
  if (arg(0)=='taxonomy' && arg(1)=='term' && isset($page['content']['system_main']['nodes'])) {
    unset($page['content']['system_main']['nodes']);
  }
}

/**
 * Implements hook_permission.
 */
function bulk_file_upload_permission() {
  return array(
    'access bulk upload page' => array(
      'title' => t('Access bulk upload form'),
    ),
    'access folder add form' => array(
      'title' => t('Access the folder add form'),
    ),
    'bulk download file archive' => array(
      'title' => t('Download all files in a folder as zip'),
    ),
  );
}

/**
 * Implements hook_form_alter.
 */
function bulk_file_upload_form_alter(&$form, &$form_state, $form_id) {
  
  if ($form_id == 'file_node_form') {
    drupal_add_js(drupal_get_path('module', 'bulk_file_upload') . '/js/bulk_file_upload_node_page.js');
  }
}

/**
 * Implements hook_forms.
 */
function bulk_file_upload_forms($form_id, $args) {
  
  return array(
    'bulk_upload_taxonomy_form' => array(
      'callback' => 'bulk_file_upload_add_taxonomy_term_form',
      'callback arguments' => array('tid'),
    ),
    'bulk_upload_files_form' => array(
      'callback' => 'bulk_file_upload_add_files_form',
      'callback arguments' => array('tid'),
    )
  );
}

/**
 * Helper function.
 * @param int $tid: The term id of the source folder whose subfolders you want displayed.
 * @return string: An html structure of the rendered subfolders.
 */
function bulk_file_upload_render_child_folders($tid) {
  
  $html = '';
  $subfolders = taxonomy_get_children($tid);

  // Display Subfolders.
  if (!empty($subfolders)) {

    $html .= '<div class="taxonomy-subfolders">';
    $html .= '<h3>' . t('Folders within this folder') . ':</h3>';
    $html .= '<ul>';

    usort($subfolders, "bulk_file_upload_sort_child_folders");

    foreach ($subfolders as $folder_id => $subfolder) {
      $html .= '<li>';
      $html .=  '<a href="/' . drupal_lookup_path('alias', 'taxonomy/term/' .$subfolder->tid) . '">' . 
                                '<img src="/' . drupal_get_path('module', 'bulk_file_upload') . '/img/folder-open.png" />' .
                                '<span>' . $subfolder->name . '</span></a>';
      $html .= '</li>';
    }

    $html .= '</ul>';
    $html .= '</div>';
  }
  
  return $html;
}

/**
 * Helper function.
 * @param int $tid: The term id of the source folder whose files you want displayed.
 * @return string: An html (table) of the rendered file list.
 */
function bulk_file_upload_render_file_table($tid) {
  
  $html = '';
  
  $query = new EntityFieldQuery();
  $results = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'file')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_file_category', 'tid', $tid)
    ->propertyOrderBy('title')
    ->execute();

  if (!empty($results)) {
    $html .= '<div class="taxonomy-files">';
    $html .= '<h3>' . t('Files in this folder') . ':</h3>';
    
    if (user_access('bulk download file archive')) {
      $html .= '<a id="bulk-file-download" href="/bulk-download-files?tid=' . $tid . '" class="btn btn-small">' . t('Download All') . '</a>';
    }
    
    $html .= '<table><tr><th>' . t('File Title') . '</th><th>' . t('Download Link') . '</th><th>' . t('File Size') . '</th><th>' . t('Last Modified By') . '</tr>';

    $file_nodes = node_load_multiple(array_keys($results['node']));

    foreach ($file_nodes as $file_node) {
      $html .= '<tr>';
      $html .= '<td><a href="/' . drupal_get_path_alias('node/' . $file_node->nid) . '">' . $file_node->title . '</a></td>';

      $file_downloads = field_get_items('node', $file_node, 'field_uploaded_file');
      if ($file_downloads != FALSE) {
        $html .= '<td><a download href="' . file_create_url($file_downloads[0]['uri']) . '">' . t('Download This File') . '</a></td>';
        $html .= '<td>' . format_size($file_downloads[0]['filesize']) . '</td>';
      }

      $revision_user = user_load($file_node->revision_uid);
      
      if ($revision_user !== FALSE) {
        $html .= '<td>' . $revision_user->realname . '</td>';
      }
      
      $html .= '</tr>';

    }

    $html .= '</table>';
    $html .= '</div>';
  }
  else {
    $html .= '<div class="messages warning">' . t('This folder has no files in it.') . '</div>';
  }
  
  return $html;
}