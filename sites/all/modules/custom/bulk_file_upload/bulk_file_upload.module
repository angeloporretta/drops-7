<?php
/**
 * @file: Functionality of the module.
 */

/**
 * Implements hook_menu_alter.
 */
/*function bulk_file_upload_menu_alter(&$items) {
  
  if (isset($items['node/add/file'])) {
    $items['node/add/file']['access callback'] = 'bulk_file_upload_access_file_pages';
  }
  if (isset($items['node/%/edit'])) {
    kpr($items['node/%/edit']);
    var_dump($items['node/%/edit']);
    exit();
  }
}

function bulk_file_upload_access_file_pages() {
  
  global $user;
  $access = FALSE;
  
  if ($user->uid != 0) {
    $access = TRUE;
  }
  
  return $access;
}

//function bulk_file_upload_form_alter(&$form, &$form_state, $form_id) {
  
//  global $user;
  
//  if ($form_id == 'file_node_form' && $user->uid != 0) {
//    drupal_add_http_header('status', 404);
//    exit();
//  }
//}
 * 
 */

/**
 * Implements hook_views_api.
 */
function bulk_file_upload_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'bulk_file_upload'),
    'template path' => drupal_get_path('module', 'bulk_file_upload') . '/templates/views',
  );
}

/**
 * Usort implementation.
 * Meant to the result of the taxonomy_get_children function.
 */
function bulk_file_upload_sort_child_folders($a, $b) {
  return strcmp($a->name, $b->name);
}

/**
 * Implements template_preprocess_taxonomy_term.
 */
function bulk_file_upload_preprocess_taxonomy_term(&$variables) {
  if ($variables['vocabulary_machine_name'] == 'file_categories') {
    $variables['content'] = '';

    $subfolders = taxonomy_get_children($variables['term']->tid);

    // Display Subfolders.
    if (!empty($subfolders)) {

      $variables['content'] .= '<div class="taxonomy-subfolders">';
      $variables['content'] .= '<h3>' . t('Folders within this folder') . ':</h3>';
      $variables['content'] .= '<ul>';

      usort($subfolders, "bulk_file_upload_sort_child_folders");
      
      foreach ($subfolders as $folder_id => $subfolder) {
        $variables['content'] .= '<li>';
        $variables['content'] .=  '<a href="/' . drupal_lookup_path('alias', 'taxonomy/term/' .$subfolder->tid) . '">' . 
                                  '<img src="/' . drupal_get_path('module', 'bulk_file_upload') . '/img/folder-open.png" />' .
                                  '<span>' . $subfolder->name . '</span></a>';
        $variables['content'] .= '</li>';
      }

      $variables['content'] .= '</ul>';
      $variables['content'] .= '</div>';
    }
    
    $variables['content'] .= render(drupal_get_form('bulk_file_upload_add_taxonomy_term_form', $variables['term']->tid));

    // Display files.
    $query = new EntityFieldQuery();
    $results = $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'file')
      ->propertyCondition('status', 1)
      ->fieldCondition('field_file_category', 'tid', $variables['term']->tid)
      ->propertyOrderBy('title')
      ->execute();

    if (!empty($results)) {
      $variables['content'] .= '<div class="taxonomy-files">';
      $variables['content'] .= '<h3>' . t('Files in this folder') . ':</h3>';
      $variables['content'] .= '<table><tr><th>' . t('File Title') . '</th><th>' . t('Download Link') . '</th><th>' . t('File Size') . '</th><th>' . t('Last Modified By') . '</tr>';

      $file_nodes = node_load_multiple(array_keys($results['node']));

      foreach ($file_nodes as $file_node) {
        $variables['content'] .= '<tr>';
        $variables['content'] .= '<td><a href="/' . drupal_get_path_alias('node/' . $file_node->nid) . '">' . $file_node->title . '</a></td>';

        $file_downloads = field_get_items('node', $file_node, 'field_uploaded_file');
        if ($file_downloads != FALSE) {
          $variables['content'] .= '<td><a href="' . file_create_url($file_downloads[0]['uri']) . '">' . t('Download This File') . '</a></td>';
          $variables['content'] .= '<td>' . format_size($file_downloads[0]['filesize']) . '</td>';
        }

        $revision_user = user_load($file_node->revision_uid);
        $variables['content'] .= '<td>' . $revision_user->realname . '</td>';
        $variables['content'] .= '</tr>';

      }

      $variables['content'] .= '</table>';
      $variables['content'] .= '</div>';
    }
    else {
      $variables['content'] .= '<div class="messages warning">' . t('This folder has no files in it.') . '</div>';
    }

    $variables['content'] .= render(drupal_get_form('bulk_file_upload_add_files_form', $variables['term']->tid));
  }
}

/**
 * Implements hook_page_build.
 */
function bulk_file_upload_page_build(&$page) {
  
  if (arg(0)=='taxonomy' && arg(1)=='term' && isset($page['content']['system_main']['nodes'])) {
    unset($page['content']['system_main']['nodes']);
  }
}

/**
 * Implements hook_permission.
 */
function bulk_file_upload_permission() {
  return array(
    'access bulk upload page' => array(
      'title' => t('Access bulk upload form'),
    ),
    'access folder add form' => array(
      'title' => t('Access the folder add form'),
    ),
  );
}

/**
 * Implements hook_menu.
 */
/*
function bulk_file_upload_menu() {
  
  return array(
    'bulk-upload-files' => array(
      'title' => t('Upload Files'),
      'description' => t('Upload files to this folder.'),
      'page callback' => 'bulk_file_upload_render_upload_page',
      'access callback' => 'user_access',
      'access arguments' => array('access bulk upload page'),
      'file' => 'bulk_file_upload.pages.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
  );
}
 * 
 */

/**
 * Implements hook_form_alter.
 */
function bulk_file_upload_form_alter(&$form, &$form_state, $form_id) {
  
  if ($form_id == 'file_node_form') {
    drupal_add_js(drupal_get_path('module', 'bulk_file_upload') . '/js/bulk_file_upload_node_page.js');
  }
}

/**
 * Implements template_preprocess_views_view.
 */
function bulk_file_upload_preprocess_views_view(&$vars) {
  
  if ($vars['view']->name == 'folder_files' && $vars['view']->current_display == 'panel_pane_1') {
   
    if (isset($vars['view']->filter['tid'])) {

      // Prepare the subfolders section of the view.
      $subfolders = taxonomy_get_children($vars['view']->filter['tid']->value[0]);

      foreach ($subfolders as $folder_id => $subfolder) {
        $subfolders[$folder_id]->path = drupal_lookup_path('alias', 'taxonomy/term/' . $subfolder->tid);
      }
      
      $vars['view']->subfolders = $subfolders;
      
      // Prepare the add taxonomy form section of the view.
      $vars['subfolder_form'] = drupal_get_form('bulk_file_upload_add_taxonomy_term_form', $vars['view']->filter['tid']->value[0]);
      
      // Prepare the add file form section of the view.
      $vars['upload_form'] = drupal_get_form('bulk_file_upload_add_files_form', $vars['view']->filter['tid']->value[0]);
    }
  }
}

/**
 * Implements hook_forms.
 */
function bulk_file_upload_forms($form_id, $args) {
  
  return array(
    'bulk_upload_taxonomy_form' => array(
      'callback' => 'bulk_file_upload_add_taxonomy_term_form',
      'callback arguments' => array('tid'),
    ),
    'bulk_upload_files_form' => array(
      'callback' => 'bulk_file_upload_add_files_form',
      'callback arguments' => array('tid'),
    )
  );
}

/**
 * Helper function.
 * Renders the add bulk files form. Will return an empty array if the user does not have permission to use the form.
 */
function bulk_file_upload_add_files_form($form, &$form_state, $tid) {
  
  $form = array();
  
  if (user_access('access bulk upload page')) {
    
    drupal_add_css(drupal_get_path('module', 'bulk_file_upload') . '/css/bulk_file_upload_upload_page.css');
    drupal_add_js(drupal_get_path('module', 'bulk_file_upload') . '/js/bulk_file_upload_upload_page.js');
    
    $form['preamble'] = array(
      '#type' => 'markup',
      '#markup' => '<h3>' . t('Upload') . '</h3>',
      '#weight' => -50,
    );

    $form['files'] = array(
      '#prefix' => '<div id="files-wrapper">',
      '#suffix' => '</div>',
      '#type' => 'fieldset',
      '#title' => t('Files you want to upload'),
    );
    
    $form['tid'] = array(
      '#type' => 'hidden',
      '#value' => $tid,
    );

    $folder = taxonomy_term_load($tid);
    $form['folder_prompt'] = array(
      '#type' => 'markup',
      '#markup' => t(
        'You will be uploading these files into the <strong>@folder_name</strong> folder.',
        array('@folder_name' => $folder->name)
      ),
      '#weight' => -49,
    );


    if (isset($_SESSION['oa_section_id'])){
      $section_node = node_load($_SESSION['oa_section_id']);

      $form['is_private'] = array(
        '#type' => 'checkbox',
        '#title' => t('These files are private.'),
        '#description' => t(
          'These files will belong to the section <strong>@section</strong> unless you uncheck this box.',
          array('@section' => $section_node->title)
        ),
        '#default_value' => 1,
        '#weight' => -48,
      );
    }
    else {
      $form['public_prompt'] = array(
        '#type' => 'markup',
        '#markup' => t('These uploaded files will be publicly accessible'),
        '#weight' => -48,
      );
    }

    $node_upload_field_info = field_info_instance('node', 'field_uploaded_file', 'file');

    for ($i = 0; $i < 20; $i++) {
      $form['files']['file_upload_' . $i] = array(
        '#type' => 'managed_file',
        '#title' => t('Choose a file'),
        '#upload_location' => 'private://' . $node_upload_field_info['settings']['file_directory'] . '/',
        '#upload_validators' => array(
          'file_validate_extensions' => array($node_upload_field_info['settings']['file_extensions']),
        ),
      );
    }

    $form['add_more'] = array(
      '#type' => 'button',
      '#value' => t('Add More'),
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Upload Files'),
    );

    $form['#validate'] = array('bulk_file_upload_add_files_form_validate');
    $form['#submit'] = array('bulk_file_upload_add_files_form_submit');
  }
  
  return $form;
  
}

/**
 * Validation handler.
 * Handles the validation for the bulk add files form.
 */
function bulk_file_upload_add_files_form_validate($form, &$form_state) {
  
  $term = taxonomy_term_load($form_state['values']['tid']);
  if ($term == FALSE || $term->vocabulary_machine_name != 'file_categories') {
    form_set_error('files', t('Error: You are trying to save these files under a restricted folder.'));
  }
}

/**
 * Submission handler.
 * Handles the submission for the bulk add files form.
 */
function bulk_file_upload_add_files_form_submit($form, &$form_state) {
  global $user;
  global $language;

  $new_file_node = (object) NULL;
  $new_file_node->type = 'file';
  $new_file_node->language = $language->language;
  $new_file_node->uid = $user->uid;
  $new_file_node->created = strtotime('now');
  $new_file_node->changed = strtotime('now');
  $new_file_node->status = 1;
  $new_file_node->comment = 1;
  $new_file_node->promote = 0;
  $new_file_node->moderate = 0;
  $new_file_node->sticky = 0;
  $new_file_node->validated = TRUE;
  $new_file_node->is_new = TRUE;
  $new_file_node->timestamp = strtotime('now');
  
  if (isset($form_state['values']['tid']) && ctype_digit($form_state['values']['tid'])) {
    $new_file_node->field_file_category['und'][0]['tid'] = $form_state['values']['tid'];
  }
   
  foreach ($form_state['values'] as $element_name => $value) {
    if (strpos($element_name, 'file_upload') !== FALSE && $value != 0) {
      if (isset($form_state['values']['is_private']) && $form_state['values']['is_private'] == 1) {
        if (isset($_SESSION['oa_space_id'])){
          $new_file_node->og_group_ref['und'][0]['target_id'] = $_SESSION['oa_space_id'];
          $new_file_node->og_group_ref['und'][0]['field_mode'] = 'default';
        }
        if (isset($_SESSION['oa_section_id'])){
          $new_file_node->oa_section_ref['und'][0]['target_id'] = $_SESSION['oa_section_id'];
        }
      }

      $saved_file = file_load($value);
      $saved_file_name = substr($saved_file->filename, 0, strrpos($saved_file->filename, '.'));
      $new_file_node->title = $saved_file_name;

      $new_file_node->field_uploaded_file['und'][0]['fid'] = $value;
      $new_file_node->field_uploaded_file['und'][0]['display'] = 1;
      
      node_save($new_file_node);
      unset($new_file_node->nid);
      unset($new_file_node->vid);
      
      drupal_set_message(t('You have successfully saved the file @filename', array('@filename' => $saved_file_name)));
    }
  }
}

/**
 * Helper function.
 * Renders the add new subfolder form. Will return an empty array if the user does not have permission to use the form.
 */
function bulk_file_upload_add_taxonomy_term_form($form, &$form_state, $parent_tid) {
  
  $form = array();
  
  if (user_access('access folder add form')) {
    
    $form['parent_tid'] = array(
      '#type' => 'hidden',
      '#value' => $parent_tid,
    );
    
    $parent_folder = taxonomy_term_load($parent_tid);
    $form['preamble'] = array(
      '#type' => 'markup',
      '#markup' => '<strong>' . t('Add a new folder within @folder_name', array('@folder_name' => $parent_folder->name)) . '</strong>',
    );
    
    $form['term_name'] = array(
      '#type' => 'textfield',
      '#title' => t('Folder Name'),
      '#default_value' => '',
      '#required' => TRUE,
    );
    
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Add Folder'),
    );
    
    $form['#validate'] = array('bulk_file_upload_add_taxonomy_term_form_validate');
    $form['#submit'] = array('bulk_file_upload_add_taxonomy_term_form_submit');
  }
  
  return $form;
}

/**
 * Validation handler.
 * Handles the validation for the add taxonomy form.
 */
function bulk_file_upload_add_taxonomy_term_form_validate($form, &$form_state) {
  
  $term = taxonomy_term_load($form_state['values']['parent_tid']);
  if ($term == FALSE || $term->vocabulary_machine_name != 'file_categories') {
    form_set_error('term_name', t('Error: You are trying to add a folder under a restricted folder.'));
  }
}

/**
 * Submission handler.
 * Handles the validation for the add taxonomy form.
 */
function bulk_file_upload_add_taxonomy_term_form_submit($form, &$form_state) {
  
  $folder_vocab = taxonomy_vocabulary_machine_name_load('file_categories');
  
  $new_folder_term = (object) NULL;
  $new_folder_term->vid = $folder_vocab->vid;
  $new_folder_term->name = $form_state['values']['term_name'];
  $new_folder_term->parent = $form_state['values']['parent_tid'];
  $new_folder_term->vocabulary_machine_name = 'file_categories';
  
  $response = taxonomy_term_save($new_folder_term);
  
  if ($response == SAVED_NEW) {
    drupal_set_message(
      t(
        'You have successfully added the folder @folder_name', 
        array(
          '@folder_name' => $form_state['values']['term_name']
        )
      )
    );
  }
  else {
    drupal_set_message(t('Uh Oh. An error has occured and your new folder could not be added.'), 'error');
  }
}