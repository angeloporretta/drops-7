<?php
/**
 * @file: Functionality of the module.
 */

module_load_include('inc', 'bulk_file_upload', 'bulk_file_upload.forms');

/**
 * Implements hook_menu_alter.
 */
/*function bulk_file_upload_menu_alter(&$items) {
  
  if (isset($items['node/add/file'])) {
    $items['node/add/file']['access callback'] = 'bulk_file_upload_access_file_pages';
  }
  if (isset($items['node/%/edit'])) {
    kpr($items['node/%/edit']);
    var_dump($items['node/%/edit']);
    exit();
  }
}

function bulk_file_upload_access_file_pages() {
  
  global $user;
  $access = FALSE;
  
  if ($user->uid != 0) {
    $access = TRUE;
  }
  
  return $access;
}

//function bulk_file_upload_form_alter(&$form, &$form_state, $form_id) {
  
//  global $user;
  
//  if ($form_id == 'file_node_form' && $user->uid != 0) {
//    drupal_add_http_header('status', 404);
//    exit();
//  }
//}
 * 
 */

/**
 * Implements hook_views_api.
 */
function bulk_file_upload_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'bulk_file_upload'),
    'template path' => drupal_get_path('module', 'bulk_file_upload') . '/templates/views',
  );
}

/**
 * Usort implementation.
 * Meant to the result of the taxonomy_get_children function.
 */
function bulk_file_upload_sort_child_folders($a, $b) {
  return strcmp($a->name, $b->name);
}

/**
 * Implements template_preprocess_taxonomy_term.
 */
function bulk_file_upload_preprocess_taxonomy_term(&$variables) {
  if ($variables['vocabulary_machine_name'] == 'file_categories') {
    $variables['content'] = '';

    $subfolders = taxonomy_get_children($variables['term']->tid);

    // Display Subfolders.
    if (!empty($subfolders)) {

      $variables['content'] .= '<div class="taxonomy-subfolders">';
      $variables['content'] .= '<h3>' . t('Folders within this folder') . ':</h3>';
      $variables['content'] .= '<ul>';

      usort($subfolders, "bulk_file_upload_sort_child_folders");
      
      foreach ($subfolders as $folder_id => $subfolder) {
        $variables['content'] .= '<li>';
        $variables['content'] .=  '<a href="/' . drupal_lookup_path('alias', 'taxonomy/term/' .$subfolder->tid) . '">' . 
                                  '<img src="/' . drupal_get_path('module', 'bulk_file_upload') . '/img/folder-open.png" />' .
                                  '<span>' . $subfolder->name . '</span></a>';
        $variables['content'] .= '</li>';
      }

      $variables['content'] .= '</ul>';
      $variables['content'] .= '</div>';
    }
    
    $variables['content'] .= render(drupal_get_form('bulk_file_upload_add_taxonomy_term_form', $variables['term']->tid));

    // Display files.
    $query = new EntityFieldQuery();
    $results = $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'file')
      ->propertyCondition('status', 1)
      ->fieldCondition('field_file_category', 'tid', $variables['term']->tid)
      ->propertyOrderBy('title')
      ->execute();

    if (!empty($results)) {
      $variables['content'] .= '<div class="taxonomy-files">';
      $variables['content'] .= '<h3>' . t('Files in this folder') . ':</h3>';
      $variables['content'] .= '<table><tr><th>' . t('File Title') . '</th><th>' . t('Download Link') . '</th><th>' . t('File Size') . '</th><th>' . t('Last Modified By') . '</tr>';

      $file_nodes = node_load_multiple(array_keys($results['node']));

      foreach ($file_nodes as $file_node) {
        $variables['content'] .= '<tr>';
        $variables['content'] .= '<td><a href="/' . drupal_get_path_alias('node/' . $file_node->nid) . '">' . $file_node->title . '</a></td>';

        $file_downloads = field_get_items('node', $file_node, 'field_uploaded_file');
        if ($file_downloads != FALSE) {
          $variables['content'] .= '<td><a href="' . file_create_url($file_downloads[0]['uri']) . '">' . t('Download This File') . '</a></td>';
          $variables['content'] .= '<td>' . format_size($file_downloads[0]['filesize']) . '</td>';
        }

        $revision_user = user_load($file_node->revision_uid);
        $variables['content'] .= '<td>' . $revision_user->realname . '</td>';
        $variables['content'] .= '</tr>';

      }

      $variables['content'] .= '</table>';
      $variables['content'] .= '</div>';
    }
    else {
      $variables['content'] .= '<div class="messages warning">' . t('This folder has no files in it.') . '</div>';
    }

    $variables['content'] .= render(drupal_get_form('bulk_file_upload_add_files_form', $variables['term']->tid));
  }
}

/**
 * Implements hook_page_build.
 */
function bulk_file_upload_page_build(&$page) {
  
  if (arg(0)=='taxonomy' && arg(1)=='term' && isset($page['content']['system_main']['nodes'])) {
    unset($page['content']['system_main']['nodes']);
  }
}

/**
 * Implements hook_permission.
 */
function bulk_file_upload_permission() {
  return array(
    'access bulk upload page' => array(
      'title' => t('Access bulk upload form'),
    ),
    'access folder add form' => array(
      'title' => t('Access the folder add form'),
    ),
  );
}

/**
 * Implements hook_menu.
 */
/*
function bulk_file_upload_menu() {
  
  return array(
    'bulk-upload-files' => array(
      'title' => t('Upload Files'),
      'description' => t('Upload files to this folder.'),
      'page callback' => 'bulk_file_upload_render_upload_page',
      'access callback' => 'user_access',
      'access arguments' => array('access bulk upload page'),
      'file' => 'bulk_file_upload.pages.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
  );
}
 * 
 */

/**
 * Implements hook_form_alter.
 */
function bulk_file_upload_form_alter(&$form, &$form_state, $form_id) {
  
  if ($form_id == 'file_node_form') {
    drupal_add_js(drupal_get_path('module', 'bulk_file_upload') . '/js/bulk_file_upload_node_page.js');
  }
}

/**
 * Implements template_preprocess_views_view.
 */
function bulk_file_upload_preprocess_views_view(&$vars) {
  
  if ($vars['view']->name == 'folder_files' && $vars['view']->current_display == 'panel_pane_1') {
   
    if (isset($vars['view']->filter['tid'])) {

      // Prepare the subfolders section of the view.
      $subfolders = taxonomy_get_children($vars['view']->filter['tid']->value[0]);

      foreach ($subfolders as $folder_id => $subfolder) {
        $subfolders[$folder_id]->path = drupal_lookup_path('alias', 'taxonomy/term/' . $subfolder->tid);
      }
      
      $vars['view']->subfolders = $subfolders;
      
      // Prepare the add taxonomy form section of the view.
      $vars['subfolder_form'] = drupal_get_form('bulk_file_upload_add_taxonomy_term_form', $vars['view']->filter['tid']->value[0]);
      
      // Prepare the add file form section of the view.
      $vars['upload_form'] = drupal_get_form('bulk_file_upload_add_files_form', $vars['view']->filter['tid']->value[0]);
    }
  }
}

/**
 * Implements hook_forms.
 */
function bulk_file_upload_forms($form_id, $args) {
  
  return array(
    'bulk_upload_taxonomy_form' => array(
      'callback' => 'bulk_file_upload_add_taxonomy_term_form',
      'callback arguments' => array('tid'),
    ),
    'bulk_upload_files_form' => array(
      'callback' => 'bulk_file_upload_add_files_form',
      'callback arguments' => array('tid'),
    )
  );
}
