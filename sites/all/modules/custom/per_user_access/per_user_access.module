<?php
/**
 * @file: Functionality of the module.
 */

/**
 * Implements hook_enable.
 */
function per_user_access_enable() {
  
  db_update('system')
    ->fields(array('weight' => 100))
    ->condition('name', 'per_user_access', '=')
    ->execute();
}

/**
 * Implements hook_node_access.
 */
function per_user_access_node_access($node, $op, $account) {
  
  $users_group_has_access = per_user_access_group_has_access($node, $account);
  $user_single_has_access = per_user_access_user_has_access($node, $account);
  
  if ($users_group_has_access !== NULL || $user_single_has_access !== NULL) {

    if ($users_group_has_access == TRUE || $user_single_has_access == TRUE) {
      return NODE_ACCESS_ALLOW;
    }
    else if ($users_group_has_access == FALSE || $user_single_has_access == FALSE) {
      return NODE_ACCESS_DENY;
    }
  }
}

/**
 * Implements template_preprocess_panels_pane.
 */
function per_user_access_preprocess_panels_pane(&$vars) {
  
  if ($vars['pane']->type == 'og_menu_single_menu' && is_array($vars['content'])) {
    
    global $user;
    
    // Recursion is not possible with nested arrays that are passed by reference... this is ugly, but it works.
    // Parent items are removed, even if people have access to child items. Goes up to 4 levels.
    foreach ($vars['content'] as $key => $menu_link_data) {

      if (is_numeric($key) && !per_user_access_is_menu_link_stays($menu_link_data, $user)) {
        unset($vars['content'][$key]);
      }
      else if (isset($vars['content'][$key]['#below']) && !empty($vars['content'][$key]['#below'])) {
        
        foreach ($vars['content'][$key]['#below'] as $key2 => $menu_link_data2) {
          if (is_numeric($key2) && per_user_access_is_menu_link_stays($menu_link_data2, $user) == FALSE) {
            unset($vars['content'][$key]['#below'][$key2]);
          }
          else if (isset($vars['content'][$key]['#below'][$key2]['#below']) && !empty($vars['content'][$key]['#below'][$key2]['#below'])) {
            foreach ($vars['content'][$key]['#below'][$key2]['#below'] as $key3 => $menu_link_data3) {
              if (is_numeric($key3) && per_user_access_is_menu_link_stays($menu_link_data3, $user) == FALSE) {
                unset($vars['content'][$key]['#below'][$key2]['#below'][$key3]);
              }
              else if (isset($vars['content'][$key]['#below'][$key2]['#below'][$key3]) && !empty($vars['content'][$key]['#below'][$key2]['#below']['#below'][$key3])) {
                foreach ($vars['content'][$key]['#below'][$key2]['#below'][$key4]['#below'] as $key4 => $menu_link_data4) {
                  if (is_numeric($key4) && per_user_access_is_menu_link_stays($menu_link_data4, $user) == FALSE) {
                    unset($vars['content'][$key]['#below'][$key2]['#below'][$key3]['#below'][$key4]);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Helper Function.
 * Determines whether or not a menu link should stay in the menu, taking into account the field_user_access field.
 * @param menu_link_data: A renderable menu link item array.
 * @user: A user object.
 * @return: True if the menu link should stay, false otherwise.
 */
function per_user_access_is_menu_link_stays($menu_link_data, $user) {
  
  $menu_link_stays = TRUE;
  $menu_item = menu_get_object('node', 1, $menu_link_data['#href']);

  if ($menu_item == NULL && strpos($menu_link_data['#href'], 'node/') !== FALSE) {
    $menu_link_stays = FALSE;
  }
  
  return $menu_link_stays;
}

/**
 * Helper Function.
 * Determines whether or not a user should have access to the node, taking into account the field_user_access field.
 * @param node: A node object.
 * @param account: A user object.
 * @return: True if the user has access to the node, false if not, NULL if the field_user_access field is not used on the node.
 */
function per_user_access_user_has_access($node, $account) {
  
  $has_access = NULL;
  
  if (property_exists($node, 'field_user_access')) {

    $users = field_get_items('node', $node, 'field_user_access');
    if ($users !== FALSE) {

      $user_ids = array();
      foreach ($users as $uid) {
        $user_ids[] = $uid['target_id'];
      }

      if (
        $account->uid != 1 &&
        !in_array('impetus admin', $account->roles) && 
        !in_array('administrator', $account->roles) && 
        !in_array($account->uid, $user_ids)
      ) {
        $has_access = FALSE;
      }
      else {
        $has_access = TRUE;
      }
    }
  }
  
  return $has_access;
}

/**
 * Helper Function.
 * Determines whether or not a user should have access to the node, taking into account the field_group_access field.
 * @param node: A node object.
 * @param account: A user object.
 * @return: True if the user has access to the node, false if not, NULL if the field_group_access field is not used on the node.
 */
function per_user_access_group_has_access($node, $account) {
  
  $has_access = NULL;
  
  if (property_exists($node, 'field_group_access')) {
    
    $user = user_load($account->uid);
    
    $node_groups = field_get_items('node', $node, 'field_group_access');
    $user_groups = og_get_groups_by_user($account);
    
    if ($node_groups !== FALSE && $user_groups !== FALSE && $user_groups !== NULL) {

      // Get all the group ids associated with this node. Including all the parents of those groups.
      $node_group_ids = array();
      
      foreach ($node_groups as $group_id) {
        $node_group_ids[] = $group_id['target_id'];
      }
      
      $hierarchy_ids = array();
      foreach ($node_group_ids as $node_group_id) {
        per_user_access_collect_hierarchy_ids($node_group_id, $hierarchy_ids);
      }
      
      $hierarchy_ids = array_unique($hierarchy_ids);
      $node_group_ids = array_merge($hierarchy_ids, $node_group_ids);
  
      // Get all the group ids associated with this user.
      foreach ($user_groups['node'] as $group_id) {
        $user_group_ids[] = $group_id;
      }
      
      $user_in_group = array_intersect($node_group_ids, $user_group_ids);
      
      if (
        $account->uid != 1 &&
        !in_array('impetus admin', $account->roles) && 
        !in_array('administrator', $account->roles) && 
        empty($user_in_group)
      ) {
        $has_access = FALSE;
      }
      else {
        $has_access = TRUE;
      }

    }
    
  }
  
  return $has_access;
}

/**
 * Helper function.
 * Populates all the ancestor groups of a group.
 * @param node_group_id: The group id at the lowest level (child group id).
 * @param hierarchy_ids: An empty array. This gets populated with ids of node_group_id's ancestors. 
 *                       This array may contain duplicates.
 */
function per_user_access_collect_hierarchy_ids($node_group_id, &$hierarchy_ids) {
  
  $group_node = node_load($node_group_id);
  $parent_group_ids = field_get_items('node', $group_node, 'oa_parent_space');
  
  if ($parent_group_ids !== FALSE) {
    foreach ($parent_group_ids as $parent_group_id) {
      $hierarchy_ids[] = $parent_group_id['target_id'];
      per_user_access_collect_hierarchy_ids($parent_group_id['target_id'], $hierarchy_ids);
    }
  }
}