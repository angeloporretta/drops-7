<?php
/**
 * @file: Functionality of the module.
 */

/**
 * Implements hook_enable.
 */
function user_login_alterations_enable() {
  
  db_update('system')
    ->fields(array('weight' => 50))
    ->condition('name', 'user_login_alterations', '=')
    ->execute();
}

/**
 * Implement hook_permission.
 */
function user_login_alterations_permission() {
  return array(
    'change job title' => array(
      'title' => t('Change Job Title'),
      'description' => t('Allows people to have access to the job title field on user entities.'),
    ),
    'change external unique identifier' => array(
      'title' => t('Change External Unique Identifier'),
      'description' => t('Allows a user access to the external unique identifier field for user creation and edit forms.'),
    ),
  );
}

/**
 * Implements hook_module_implements_alter.
 */
function user_login_alterations_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    case 'form_alter':
      user_login_alterations_change_form_hook_order($implementations);
    break;
    case 'form_user_profile_form_alter':
      user_login_alterations_change_form_hook_order($implementations);
    break;
  }
}

/**
 * Helper function.
 * Reorders this module's implementation to the end of the hook firing list.
 */
function user_login_alterations_change_form_hook_order(&$implementations) {
  if (isset($implementations['user_login_alterations'])) {
    $group = $implementations['user_login_alterations'];
    unset($implementations['user_login_alterations']);
    $implementations['user_login_alterations'] = $group; 
  }
}

/**
 * Implements hook_form_alter.
 */
function user_login_alterations_form_alter(&$form, &$form_state, $form_id) {
  
  switch ($form_id) {
    case 'user_login':
      user_login_alterations_alter_login_form($form);
    break;
    case 'user_login_block':
      user_login_alterations_alter_login_form($form);
    break;
    case 'user_pass':
      
      drupal_set_title(t('Troubleshoot Access'));
      $form['preamble'] = array(
        '#type' => 'markup',
        '#markup' =>  t('If you cannot sign on, but you are using the email registered to this portal – where all email communications are sent - please enter your email below and press "Email me Access".'),
        '#weight' => -50,
      );
      $form['name']['#title'] = t('My Email Address');
      $form['name']['#description'] = t('Use your email address that is registered with this portal.') .
                                      '<br/>' .
                                      t('Typically it will be in the format "myname@mycompany.com"');
      $form['actions']['submit']['#value'] = t('Email me Access');
      
      // Replace a validation handler.
      $validation_handler = array_search('user_pass_validate', $form['#validate']);
      if ($validation_handler !== FALSE) {
        unset($form['#validate'][$validation_handler]);
        $form['#validate'][] = 'user_login_alterations_pass_validate';
      }
    break;
    case 'user_profile_form':
      if (isset($form['field_job_title']) && !user_access('change job title')) {
        unset($form['field_job_title']);
      }
      if (isset($form['field_external_unique_identifier']) && !user_access('change external unique identifier')) {
        unset($form['field_external_unique_identifier']);
      }
      $form['account']['pass']['#description'] = t('To change the current user password, enter the new password in both fields.<br/><strong>Please record this password for future use.</strong>');
    break;
    case 'user_register_form':
      
      $form['account']['notify']['#ajax'] = array(
        'callback' => 'user_login_alterations_ajax_custom_email_message',
        'wrapper' => 'user-email-notify-wrapper',
      );
      
      $form['account']['custom_email_message'] = array(
        '#prefix' => '<div id="user-email-notify-wrapper" style="display: none;">',
        '#suffix' => '</div>',
        '#type' => 'text_format',
        '#title' => t('Custom message in email'),
        '#default_value' => '',
        '#format' => 'custom_email_html',
      );
      
      if (isset($form['field_external_unique_identifier']) && !user_access('change external unique identifier')) {
        unset($form['field_external_unique_identifier']);
      }
      
      array_unshift($form['#submit'], 'user_login_alterations_save_custom_email_message');

    break;
  }
}

function user_login_alterations_ajax_custom_email_message($form, $form_state) {
  
  if ($form_state['values']['notify'] == 1) {    
    $form['account']['custom_email_message']['#prefix'] = '<div id="user-email-notify-wrapper">';
  }
  else {
    $form['account']['custom_email_message']['#prefix'] = '<div id="user-email-notify-wrapper" style="display: none;">';
  }
  
  return $form['account']['custom_email_message'];
}

function user_login_alterations_save_custom_email_message($form, &$form_state) {

  if (
    $form_state['values']['notify'] == 1 &&
    isset($form_state['values']['custom_email_message']) && 
    $form_state['values']['custom_email_message']['value'] != ''
  ) {
    variable_set('user_login_alterations_custom_creation_message', $form_state['values']['custom_email_message']['value']);
    variable_set('user_login_alterations_custom_creation_message_format', $form_state['values']['custom_email_message']['format']);
  }
  else {
    variable_set('user_login_alterations_custom_creation_message', '');
    variable_set('user_login_alterations_custom_creation_message_format', 'plain_text');
  }
}

/**
 * Helper Function.
 * Alters the login form.
 */
function user_login_alterations_alter_login_form(&$form) {
  
  $form['name']['#title'] = t('Email');
  unset($form['name']['#description']);

  // Replace a validation handler.
  $validation_handler = array_search('user_login_final_validate', $form['#validate']);
  if ($validation_handler !== FALSE) {
    unset($form['#validate'][$validation_handler]);
    $form['#validate'][] = 'user_login_alterations_login_final_validate';
  }
  
  $form['actions']['submit']['#value'] = t('Sign In');
}

/**
 * Validation Handler.
 * Replaces the default validation handler for user logins. 
 * It is mostly the core validation handler (user_login_final_validate) found in the user module.
 */
function user_login_alterations_login_final_validate($form, &$form_state) {
  if (empty($form_state['uid'])) {
    // Always register an IP-based failed login event.
    flood_register_event('failed_login_attempt_ip', variable_get('user_failed_login_ip_window', 3600));
    // Register a per-user failed login event.
    if (isset($form_state['flood_control_user_identifier'])) {
      flood_register_event('failed_login_attempt_user', variable_get('user_failed_login_user_window', 21600), $form_state['flood_control_user_identifier']);
    }

    if (isset($form_state['flood_control_triggered'])) {
      if ($form_state['flood_control_triggered'] == 'user') {
        form_set_error('name', format_plural(variable_get('user_failed_login_user_limit', 5), 'Sorry, there has been more than one failed login attempt for this account. It is temporarily blocked. Try again later or <a href="@url">request a new password</a>.', 'Sorry, there have been more than @count failed login attempts for this account. It is temporarily blocked. Try again later or <a href="@url">request a new password</a>.', array('@url' => url('user/password'))));
      }
      else {
        // We did not find a uid, so the limit is IP-based.
        form_set_error('name', t('Sorry, too many failed login attempts from your IP address. This IP address is temporarily blocked. Try again later or <a href="@url">request a new password</a>.', array('@url' => url('user/password'))));
      }
    }
    else {
      form_set_error('name', t('Sorry, it seems that the credentials you provided are incorrect. Please ensure you are using the email registered to this portal – where all email communications are sent.<br/><br/>If you still cannot sign on, then please <a href="@password">CLICK HERE</a> to get further help.', array('@password' => url('user/password', array('query' => array('name' => $form_state['values']['name']))))));
      watchdog('user', 'Login attempt failed for %user.', array('%user' => $form_state['values']['name']));
    }
  }
  elseif (isset($form_state['flood_control_user_identifier'])) {
    // Clear past failures for this user so as not to block a user who might
    // log in and out more than once in an hour.
    flood_clear_event('failed_login_attempt_user', $form_state['flood_control_user_identifier']);
  }
}

/**
 * Validation handler.
 * Used to replace core handler (user_pass_validate). It's mostly the same code from the user module.
 */
function user_login_alterations_pass_validate($form, &$form_state) {
  $name = trim($form_state['values']['name']);
  // Try to load by email.
  $users = user_load_multiple(array(), array('mail' => $name, 'status' => '1'));
  $account = reset($users);
  if (!$account) {
    // No success, try to load by name.
    $users = user_load_multiple(array(), array('name' => $name, 'status' => '1'));
    $account = reset($users);
  }
  if (isset($account->uid)) {
    form_set_value(array('#parents' => array('account')), $account, $form_state);
  }
  else {
    form_set_error('name', t('Sorry, the email address @name does not exist in our system. Please ensure you are using the email registered to this portal – where all email communications are sent.<br/><br/>Please <a href="/user/login">CLICK HERE</a> to go back to the sign on page and use that email address. If you are still experiencing issues, please email <strong>support@impetushealthcare.com</strong>.', array('@name' => $name)));
  }
}

function user_login_alterations_mail_alter(&$message) {
  
  if ($message['id'] == 'user_register_admin_created') {
    
    $admin_message = check_markup(
      variable_get('user_login_alterations_custom_creation_message', ''),
      variable_get('user_login_alterations_custom_creation_message_format', 'plain_text')
    );
    
    $message['body'][0] = str_replace(
      'user_login_alterations:custom_user_created_message',
      $admin_message,
      $message['body'][0]
    );
    
    variable_set('user_login_alterations_custom_creation_message', '');
    variable_set('user_login_alterations_custom_creation_message_format', 'plain_text');
  }
}
